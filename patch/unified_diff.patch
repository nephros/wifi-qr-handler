diff -Naur a/usr/share/jolla-settings/pages/wlan/mainpage.qml b/usr/share/jolla-settings/pages/wlan/mainpage.qml
--- a/usr/share/jolla-settings/pages/wlan/mainpage.qml	2023-03-28 13:28:54.759998828 +0200
+++ b/usr/share/jolla-settings/pages/wlan/mainpage.qml	2023-03-28 17:56:43.157634377 +0200
@@ -16,6 +16,40 @@
     property bool showAddNetworkDialog
     property bool pageReady
 
+    property string codeString
+
+    function parseCodeString(code) {
+        /* See also: https://github.com/zxing/zxing/wiki/Barcode-Contents
+         *
+         * 'wifi:S:sApname;T:sType;P:sPassword;H:bHidden;I:sEAPIdentity;H:bHidden;E:sEAPMethod;PH2:sEAPPhase2'
+         * S: SSID
+         * T: WEP or WPA or WPA2-EAP or nopass
+         * E: TTLS or PWD
+         *
+         */
+        // NB: "code" is an url, not a string
+        var scheme = /^wifi:/i;
+        var escaped = /\\[\\;,":]/g; // may be backslash-escaped
+        var tokens = code.toString().replace(scheme,'').split(';');
+        var codes = {}
+        for (var i=0; i < tokens.length; ++i) {
+            var pair = tokens[i].split(':')
+            if (pair.length < 2) continue; // empty value --> undefined
+            if (pair && pair[1] && pair[1].length > 0) codes[pair[0]] = pair[1].replace(escaped, '');
+        }
+        var nwconfig = {
+            ssid:         codes["S"],
+            securityType: codes["T"],
+            passphrase:   codes["P"],
+            anon:         codes["A"],
+            identity:     codes["I"],
+            hidden:       (codes["H"] === "true"),
+            eapMethod:    codes["E"],
+            phase2:       codes["PH2"]
+        }
+        return nwconfig
+    }
+
     onStatusChanged: {
         if (status == PageStatus.Active) {
             pageReady = true
@@ -24,15 +58,44 @@
 
                 var addNetworkProperties = networkHelper.readSettings()
                 var dialog = pageStack.push(Qt.resolvedUrl("AddNetworkDialog.qml"), { networkManager: networkManager }, PageStackAction.Immediate)
-                dialog.network.ssid = addNetworkProperties.ssid
-                dialog.network.hidden = addNetworkProperties.hidden
-                dialog.network.securityType = addNetworkProperties.securityType
-                if (addNetworkProperties.eapMethod !== undefined)
-                    dialog.network.eapMethod = addNetworkProperties.eapMethod
-                if (addNetworkProperties.phase2)
-                    dialog.network.phase2 = addNetworkProperties.phase2
-                dialog.network.identity = addNetworkProperties.identity
-                dialog.network.passphrase = addNetworkProperties.passphrase
+                var providedSettings
+                if (codeString !== undefined)
+                    providedSettings = parseCodeString(codeString)
+                if (providedSettings !== undefined) {
+                    dialog.network.ssid = providedSettings.ssid
+                    dialog.network.hidden = providedSettings.hidden
+                    dialog.network.passphrase = providedSettings.passphrase
+                    switch ( providedSettings.securityType ) {
+                        case "nopass":   dialog.network.securityType = NetworkService.SecurityNone; break;
+                        case "WEP":      dialog.network.securityType = NetworkService.SecurityWEP; break;
+                        case "WPA":      dialog.network.securityType = NetworkService.SecurityPSK; break;
+                        case "WPA2-EAP": dialog.network.securityType = NetworkService.SecurityIEEE802
+                                         dialog.network.identity     = providedSettings.identity
+                                         // not supported by dialog?
+                                         dialog.network.anonymousIdentity = providedSettings.anon
+                                         switch (providedSettings.eapMethod) {
+                                             case "TLS":  dialog.network.eapMethod = NetworkService.EapTLS; break;
+                                             case "TTLS": dialog.network.eapMethod = NetworkService.EapTTLS; break;
+                                             case "PEAP": dialog.network.eapMethod = NetworkService.EapPEAP; break;
+                                             case "PWD":  dialog.network.eapMethod = NetworkService.EapPEAP; break;
+                                             default:     dialog.network.eapMethod = NetworkService.EapNone; break;
+                                         }
+                                         dialog.network.anonymousIdentity = providedSettings.anon
+                                         break;
+                        default:         dialog.network.securityType = NetworkService.SecurityPSK; break;
+                    }
+                    // FIXME: add EAP parameters as well
+                } else {
+                    dialog.network.ssid = addNetworkProperties.ssid
+                    dialog.network.hidden = addNetworkProperties.hidden
+                    dialog.network.securityType = addNetworkProperties.securityType
+                    dialog.network.passphrase = addNetworkProperties.passphrase
+                    if (addNetworkProperties.eapMethod !== undefined)
+                        dialog.network.eapMethod = addNetworkProperties.eapMethod
+                    if (addNetworkProperties.phase2)
+                        dialog.network.phase2 = addNetworkProperties.phase2
+                    dialog.network.identity = addNetworkProperties.identity
+                }
                 if (addNetworkProperties.caCert) {
                     dialog.network.caCert = addNetworkProperties.caCert
                 } else if (addNetworkProperties.caCertFile) {
diff -Naur a/usr/share/jolla-settings/settings.qml b/usr/share/jolla-settings/settings.qml
--- a/usr/share/jolla-settings/settings.qml	2023-03-28 08:26:18.094183631 +0200
+++ b/usr/share/jolla-settings/settings.qml	2023-03-28 17:56:46.425613856 +0200
@@ -99,6 +99,16 @@
             window.showSettingsPage("system_settings", Qt.resolvedUrl("pages/wlan/mainpage.qml"), { "showAddNetworkDialog": true })
         }
 
+        function showAddNetworkDialogFromQR(code) {
+            const scheme = /^wifi:/i;
+            if (!scheme.test(code.toString())) { // "code" is an url, not a string
+                showAddNetworkDialog()
+            } else {
+                console.info("Adding Wi-Fi network from QR code")
+                window.showSettingsPage("system_settings", Qt.resolvedUrl("pages/wlan/mainpage.qml"), { "showAddNetworkDialog": true, "codeString": code })
+            }
+        }
+
         function importVpn(args) {
             window.showSettingsPage("system_settings", Qt.resolvedUrl("pages/vpn/mainpage.qml"), { "importPath": args[1], "importMime": args[0] })
         }
